Docker = crea una mini maquina donde utiliza lo mínimo necesario para funcionar

(levanta sistema con lo mínimo necesario funcional)

Docker-file; archivo con instrucciones 
Docker-compose; archivos jam
ENV = environment ( interacción con usuario)
---------------------------------------------------
SCRIPT CON PYHTON PARA SERVIDOR WEB	

┌──(root㉿kali)-[~]
└─# mkdir docker
                                                                             
┌──(root㉿kali)-[~]
└─# cd docker              
                                                                             
┌──(root㉿kali)-[~/docker]
└─# mkdir web1  
                                                                             
┌──(root㉿kali)-[~/docker]
└─# cd web1  
---------------------------------------    
INSTALAMOS DOCKER.IO                                                                       
┌──(root㉿kali)-[~/docker/web1]
└─# apt update   
┌──(root㉿kali)-[~/docker/web1]
└─# apt install -y docker.io
---------------------------------------
DENTRO DE DOCKER-FILE LOS SIGUIENTES PARAMETROS

FROM -- IMAGEN /Ubuntu:latest/Ubuntu:22.04
RUN -- COMMANDOS (ejecuta comandos )
COPY -- COPIAR (copia archivos locales al contenedor)
CMD -- EJECUCCION POST (aca iniciamos las aplicaciones queremos que funcionen después de que se instalen)

┌──(root㉿kali)-[~/docker/web1]
└─# nano Dockerfile

CONTENIDO DEL NANO 
----------------------------------------------
FROM ubuntu:22.04

ENV FRONTEND=nonintercative

RUN apt update && \
        apt upgrade -y && apt install apache2 -y && \
        apt clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY index.html /var/www/html/
RUN chown -R www-data:www-data /var/www/html/
EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]
----------------------------------------------
(con el rm optimizamos espacio eliminando archivos temporales)
(expose, entramos al contenedor)
(con el cmd iniciamos el servicio y lo pasamos al primer plano)
---------------------------------------
┌──(root㉿kali)-[~/docker/web1]
└─# nano index.html

┌──(root㉿kali)-[~/docker/web1]
└─# docker build -t web1 .
---------------------------------------
REVISAR LA IMAGEN DE DOCKER

┌──(root㉿kali)-[~/docker/web1]
└─# docker images
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
web1         latest    6af440b39c3e   2 minutes ago   193MB
--------------------------------------
LEVANTAMOS LA IMAGEN DOCKER

┌──(root㉿kali)-[~/docker/web1]
└─# docker run -d -p 80:80 --name web1 web1
545aee05b4b56490e5c7d5f0f347103586f585f6bef1e68c3c4b29e0580e9c1d

(80:80 indica la conexión al purto que entramos y el que entra en el expose)
--------------------------------------
PROBAMOS LA CONEXION A DOCKER
-Con la dirección ip  revisamos si la pagina esta funcionando.
-------------------------------------
DETENEMOS LA IMAGEN 
┌──(root㉿kali)-[~/docker/web1]
└─# docker container stop web1
web1

PARA ELIMINAR UNA IMAGEN REMPLAZAMOS EL "STOP" POR UN "RM"
-------------------------------------
MODIFICAMOS EL INDEX 

┌──(root㉿kali)-[~/docker/web1]
└─# nano index.html                        
                                                                                                                                  
┌──(root㉿kali)-[~/docker/web1]
└─# docker build -t web1 .      
┌──(root㉿kali)-[~/docker/web1]
└─# docker run -d -p 8080:80 --name web1 web1

CONECTAMOS NUEVAMENTE

http://127.17.0.1:8080/
------------------------------------
------------------------------------
LEVANTAMIENTO DEL SERVICIO EN PYTHON

┌──(root㉿kali)-[~/docker]
└─# mkdir web2
┌──(root㉿kali)-[~/docker]
└─# nano app.py
------------------------------------
from flask import Flask
from flask import request
from flask import render_template

var = Flask(__name__)
@var.route("/")
def main():
    return render_template("index.html")
 
if __name__ == "__main__":
    var.run(host="0.0.0.0", port=8080)
------------------------------------
┌──(root㉿kali)-[~/docker/web2]
└─# nano Dockerfile  

FROM python

RUN apt update
RUN apt-get install -y python3-pip
RUN pip install flask
COPY app.py /home/app/
COPY index.html /home/app/templates/

EXPOSE 8080
CMD python /home/app/app.py
------------------------------------

┌──(root㉿kali)-[~/docker/web2]
└─# docker build -t web2 . 
┌──(root㉿kali)-[~/docker/web2]
└─# docker run -d -p 8888:8080 --name web2 web2
78f0e34c74cc00ad95219eeabd6a552487bec3743773759374f2f5a9d4a038ba

REVISAMOS A LA DIRECCION 
http://127.17.0.1:8888/
-----------------------------------
┌──(root㉿kali)-[~/docker/web2]
└─# docker container ls     
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                       NAMES
d07bb992e437   web2      "/bin/sh -c 'python …"   3 minutes ago    Up 3 minutes    0.0.0.0:8888->8080/tcp, :::8888->8080/tcp   web2
6dd7a83fed1e   web1      "apache2ctl -D FOREG…"   31 minutes ago   Up 31 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp       web1

(LISTA LOS CONTENEDORES QUE ESTAN FUNCIONANDO EN ESTE MOMENTO)
(LOS COMANDO QUE SE ESTAN EJECUNTANDO, LOS PUERTOS DEL CONTENEDOR, STATUS)

┌──(root㉿kali)-[~/docker/web2]
└─# docker exec -it web1 /bin/bash
(EXEC PERMITE UTILIZAR COMANDOS DENTRO DEL CONTENEDOR, PODEMOS HACER MODIFICACIONES, PERO SI NO GUARDAMOS SE PIERDE TODO)
#docker commit 
                                                               
------------------------------------------------
------------------------------------------------
------------------------------------------------

DOCKER-FILE
---------------

  GNU nano 8.3                      Dockerfile                               
FROM ubuntu:22.04

ENV FRONTEND=nonintercative

RUN apt update && \
        apt install apache2 -y && \
        apt clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY index.html /var/www/html/web1/index.html
COPY index2.html /var/www/html/web2/index.html
COPY index3.html /var/www/html/web3/index.html
RUN chown -R www-data:www-data /var/www/html/
EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]

INDEXS
-----------------
┌──(root㉿kali)-[~/diego]
└─# nano index.html
                     
┌──(root㉿kali)-[~/diego]
└─# nano index2.html
                     
┌──(root㉿kali)-[~/diego]
└─# nano index3.html


LANZAMOS LA NUEVA IMAGEN
--------------------------
┌──(root㉿kali)-[~/diego]
└─# docker build -t diego . 

┌──(root㉿kali)-[~/diego]
└─# docker run -d -p 9000:80 --name diego diego
f4c1e5181c69d3ec085d75d4abe3048d963524918b8e2ebe5350bdffc4b3d253

                     




                                                  








Docker = crea una mini maquina donde utiliza lo mínimo necesario para funcionar

(levanta sistema con lo mínimo necesario funcional)

Docker-file; archivo con instrucciones 
Docker-compose; archivos jam
ENV = environment ( interacción con usuario)
---------------------------------------------------
SCRIPT CON PYHTON PARA SERVIDOR WEB	

┌──(root㉿kali)-[~]
└─# mkdir docker
                                                                             
┌──(root㉿kali)-[~]
└─# cd docker              
                                                                             
┌──(root㉿kali)-[~/docker]
└─# mkdir web1  
                                                                             
┌──(root㉿kali)-[~/docker]
└─# cd web1  
---------------------------------------    
INSTALAMOS DOCKER.IO                                                                       
┌──(root㉿kali)-[~/docker/web1]
└─# apt update   
┌──(root㉿kali)-[~/docker/web1]
└─# apt install -y docker.io
---------------------------------------
DENTRO DE DOCKER-FILE LOS SIGUIENTES PARAMETROS

FROM -- IMAGEN /Ubuntu:latest/Ubuntu:22.04
RUN -- COMMANDOS (ejecuta comandos )
COPY -- COPIAR (copia archivos locales al contenedor)
CMD -- EJECUCCION POST (aca iniciamos las aplicaciones queremos que funcionen después de que se instalen)

┌──(root㉿kali)-[~/docker/web1]
└─# nano Dockerfile

CONTENIDO DEL NANO 
----------------------------------------------
FROM ubuntu:22.04

ENV FRONTEND=nonintercative

RUN apt update && \
        apt upgrade -y && apt install apache2 -y && \
        apt clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY index.html /var/www/html/
RUN chown -R www-data:www-data /var/www/html/
EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]
----------------------------------------------
(con el rm optimizamos espacio eliminando archivos temporales)
(expose, entramos al contenedor)
(con el cmd iniciamos el servicio y lo pasamos al primer plano)
---------------------------------------
┌──(root㉿kali)-[~/docker/web1]
└─# nano index.html

┌──(root㉿kali)-[~/docker/web1]
└─# docker build -t web1 .
---------------------------------------
REVISAR LA IMAGEN DE DOCKER

┌──(root㉿kali)-[~/docker/web1]
└─# docker images
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
web1         latest    6af440b39c3e   2 minutes ago   193MB
--------------------------------------
LEVANTAMOS LA IMAGEN DOCKER

┌──(root㉿kali)-[~/docker/web1]
└─# docker run -d -p 80:80 --name web1 web1
545aee05b4b56490e5c7d5f0f347103586f585f6bef1e68c3c4b29e0580e9c1d

(80:80 indica la conexión al purto que entramos y el que entra en el expose)
--------------------------------------
PROBAMOS LA CONEXION A DOCKER
-Con la dirección ip  revisamos si la pagina esta funcionando.
-------------------------------------
DETENEMOS LA IMAGEN 
┌──(root㉿kali)-[~/docker/web1]
└─# docker container stop web1
web1

PARA ELIMINAR UNA IMAGEN REMPLAZAMOS EL "STOP" POR UN "RM"
-------------------------------------
MODIFICAMOS EL INDEX 

┌──(root㉿kali)-[~/docker/web1]
└─# nano index.html                        
                                                                                                                                  
┌──(root㉿kali)-[~/docker/web1]
└─# docker build -t web1 .      
┌──(root㉿kali)-[~/docker/web1]
└─# docker run -d -p 8080:80 --name web1 web1

CONECTAMOS NUEVAMENTE

http://127.17.0.1:8080/
------------------------------------
------------------------------------
LEVANTAMIENTO DEL SERVICIO EN PYTHON

┌──(root㉿kali)-[~/docker]
└─# mkdir web2
┌──(root㉿kali)-[~/docker]
└─# nano app.py
------------------------------------
from flask import Flask
from flask import request
from flask import render_template

var = Flask(__name__)
@var.route("/")
def main():
    return render_template("index.html")
 
if __name__ == "__main__":
    var.run(host="0.0.0.0", port=8080)
------------------------------------
┌──(root㉿kali)-[~/docker/web2]
└─# nano Dockerfile  

FROM python

RUN apt update
RUN apt-get install -y python3-pip
RUN pip install flask
COPY app.py /home/app/
COPY index.html /home/app/templates/

EXPOSE 8080
CMD python /home/app/app.py
------------------------------------

┌──(root㉿kali)-[~/docker/web2]
└─# docker build -t web2 . 
┌──(root㉿kali)-[~/docker/web2]
└─# docker run -d -p 8888:8080 --name web2 web2
78f0e34c74cc00ad95219eeabd6a552487bec3743773759374f2f5a9d4a038ba

REVISAMOS A LA DIRECCION 
http://127.17.0.1:8888/
-----------------------------------
┌──(root㉿kali)-[~/docker/web2]
└─# docker container ls     
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                       NAMES
d07bb992e437   web2      "/bin/sh -c 'python …"   3 minutes ago    Up 3 minutes    0.0.0.0:8888->8080/tcp, :::8888->8080/tcp   web2
6dd7a83fed1e   web1      "apache2ctl -D FOREG…"   31 minutes ago   Up 31 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp       web1

(LISTA LOS CONTENEDORES QUE ESTAN FUNCIONANDO EN ESTE MOMENTO)
(LOS COMANDO QUE SE ESTAN EJECUNTANDO, LOS PUERTOS DEL CONTENEDOR, STATUS)

┌──(root㉿kali)-[~/docker/web2]
└─# docker exec -it web1 /bin/bash
(EXEC PERMITE UTILIZAR COMANDOS DENTRO DEL CONTENEDOR, PODEMOS HACER MODIFICACIONES, PERO SI NO GUARDAMOS SE PIERDE TODO)
#docker commit 
                                                               
------------------------------------------------
------------------------------------------------
------------------------------------------------

DOCKER-FILE
---------------

  GNU nano 8.3                      Dockerfile                               
FROM ubuntu:22.04

ENV FRONTEND=nonintercative

RUN apt update && \
        apt install apache2 -y && \
        apt clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY index.html /var/www/html/web1/index.html
COPY index2.html /var/www/html/web2/index.html
COPY index3.html /var/www/html/web3/index.html
RUN chown -R www-data:www-data /var/www/html/
EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]

INDEXS
-----------------
┌──(root㉿kali)-[~/diego]
└─# nano index.html
                     
┌──(root㉿kali)-[~/diego]
└─# nano index2.html
                     
┌──(root㉿kali)-[~/diego]
└─# nano index3.html


LANZAMOS LA NUEVA IMAGEN
--------------------------
┌──(root㉿kali)-[~/diego]
└─# docker build -t diego . 

┌──(root㉿kali)-[~/diego]
└─# docker run -d -p 9000:80 --name diego diego
f4c1e5181c69d3ec085d75d4abe3048d963524918b8e2ebe5350bdffc4b3d253

                     




                                                  








Docker = crea una mini maquina donde utiliza lo mínimo necesario para funcionar

(levanta sistema con lo mínimo necesario funcional)

Docker-file; archivo con instrucciones 
Docker-compose; archivos jam
ENV = environment ( interacción con usuario)
---------------------------------------------------
SCRIPT CON PYHTON PARA SERVIDOR WEB	

┌──(root㉿kali)-[~]
└─# mkdir docker
                                                                             
┌──(root㉿kali)-[~]
└─# cd docker              
                                                                             
┌──(root㉿kali)-[~/docker]
└─# mkdir web1  
                                                                             
┌──(root㉿kali)-[~/docker]
└─# cd web1  
---------------------------------------    
INSTALAMOS DOCKER.IO                                                                       
┌──(root㉿kali)-[~/docker/web1]
└─# apt update   
┌──(root㉿kali)-[~/docker/web1]
└─# apt install -y docker.io
---------------------------------------
DENTRO DE DOCKER-FILE LOS SIGUIENTES PARAMETROS

FROM -- IMAGEN /Ubuntu:latest/Ubuntu:22.04
RUN -- COMMANDOS (ejecuta comandos )
COPY -- COPIAR (copia archivos locales al contenedor)
CMD -- EJECUCCION POST (aca iniciamos las aplicaciones queremos que funcionen después de que se instalen)

┌──(root㉿kali)-[~/docker/web1]
└─# nano Dockerfile

CONTENIDO DEL NANO 
----------------------------------------------
FROM ubuntu:22.04

ENV FRONTEND=nonintercative

RUN apt update && \
        apt upgrade -y && apt install apache2 -y && \
        apt clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY index.html /var/www/html/
RUN chown -R www-data:www-data /var/www/html/
EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]
----------------------------------------------
(con el rm optimizamos espacio eliminando archivos temporales)
(expose, entramos al contenedor)
(con el cmd iniciamos el servicio y lo pasamos al primer plano)
---------------------------------------
┌──(root㉿kali)-[~/docker/web1]
└─# nano index.html

┌──(root㉿kali)-[~/docker/web1]
└─# docker build -t web1 .
---------------------------------------
REVISAR LA IMAGEN DE DOCKER

┌──(root㉿kali)-[~/docker/web1]
└─# docker images
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
web1         latest    6af440b39c3e   2 minutes ago   193MB
--------------------------------------
LEVANTAMOS LA IMAGEN DOCKER

┌──(root㉿kali)-[~/docker/web1]
└─# docker run -d -p 80:80 --name web1 web1
545aee05b4b56490e5c7d5f0f347103586f585f6bef1e68c3c4b29e0580e9c1d

(80:80 indica la conexión al purto que entramos y el que entra en el expose)
--------------------------------------
PROBAMOS LA CONEXION A DOCKER
-Con la dirección ip  revisamos si la pagina esta funcionando.
-------------------------------------
DETENEMOS LA IMAGEN 
┌──(root㉿kali)-[~/docker/web1]
└─# docker container stop web1
web1

PARA ELIMINAR UNA IMAGEN REMPLAZAMOS EL "STOP" POR UN "RM"
-------------------------------------
MODIFICAMOS EL INDEX 

┌──(root㉿kali)-[~/docker/web1]
└─# nano index.html                        
                                                                                                                                  
┌──(root㉿kali)-[~/docker/web1]
└─# docker build -t web1 .      
┌──(root㉿kali)-[~/docker/web1]
└─# docker run -d -p 8080:80 --name web1 web1

CONECTAMOS NUEVAMENTE

http://127.17.0.1:8080/
------------------------------------
------------------------------------
LEVANTAMIENTO DEL SERVICIO EN PYTHON

┌──(root㉿kali)-[~/docker]
└─# mkdir web2
┌──(root㉿kali)-[~/docker]
└─# nano app.py
------------------------------------
from flask import Flask
from flask import request
from flask import render_template

var = Flask(__name__)
@var.route("/")
def main():
    return render_template("index.html")
 
if __name__ == "__main__":
    var.run(host="0.0.0.0", port=8080)
------------------------------------
┌──(root㉿kali)-[~/docker/web2]
└─# nano Dockerfile  

FROM python

RUN apt update
RUN apt-get install -y python3-pip
RUN pip install flask
COPY app.py /home/app/
COPY index.html /home/app/templates/

EXPOSE 8080
CMD python /home/app/app.py
------------------------------------

┌──(root㉿kali)-[~/docker/web2]
└─# docker build -t web2 . 
┌──(root㉿kali)-[~/docker/web2]
└─# docker run -d -p 8888:8080 --name web2 web2
78f0e34c74cc00ad95219eeabd6a552487bec3743773759374f2f5a9d4a038ba

REVISAMOS A LA DIRECCION 
http://127.17.0.1:8888/
-----------------------------------
┌──(root㉿kali)-[~/docker/web2]
└─# docker container ls     
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                       NAMES
d07bb992e437   web2      "/bin/sh -c 'python …"   3 minutes ago    Up 3 minutes    0.0.0.0:8888->8080/tcp, :::8888->8080/tcp   web2
6dd7a83fed1e   web1      "apache2ctl -D FOREG…"   31 minutes ago   Up 31 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp       web1

(LISTA LOS CONTENEDORES QUE ESTAN FUNCIONANDO EN ESTE MOMENTO)
(LOS COMANDO QUE SE ESTAN EJECUNTANDO, LOS PUERTOS DEL CONTENEDOR, STATUS)

┌──(root㉿kali)-[~/docker/web2]
└─# docker exec -it web1 /bin/bash
(EXEC PERMITE UTILIZAR COMANDOS DENTRO DEL CONTENEDOR, PODEMOS HACER MODIFICACIONES, PERO SI NO GUARDAMOS SE PIERDE TODO)
#docker commit 
                                                               
------------------------------------------------
------------------------------------------------
------------------------------------------------

DOCKER-FILE
---------------

  GNU nano 8.3                      Dockerfile                               
FROM ubuntu:22.04

ENV FRONTEND=nonintercative

RUN apt update && \
        apt install apache2 -y && \
        apt clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY index.html /var/www/html/web1/index.html
COPY index2.html /var/www/html/web2/index.html
COPY index3.html /var/www/html/web3/index.html
RUN chown -R www-data:www-data /var/www/html/
EXPOSE 80

CMD ["apache2ctl", "-D", "FOREGROUND"]

INDEXS
-----------------
┌──(root㉿kali)-[~/diego]
└─# nano index.html
                     
┌──(root㉿kali)-[~/diego]
└─# nano index2.html
                     
┌──(root㉿kali)-[~/diego]
└─# nano index3.html


LANZAMOS LA NUEVA IMAGEN
--------------------------
┌──(root㉿kali)-[~/diego]
└─# docker build -t diego . 

┌──(root㉿kali)-[~/diego]
└─# docker run -d -p 9000:80 --name diego diego
f4c1e5181c69d3ec085d75d4abe3048d963524918b8e2ebe5350bdffc4b3d253

                     




                                             
